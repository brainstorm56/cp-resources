1. (a) Kadane's Algo for calculating maxsum only (without indexes)


    ll maxSubArray(vector<ll>& nums) {
        ll curMax = 0, maxTillNow = INT_MIN;
        for(auto c : nums)
            curMax = max(c, curMax + c),
            maxTillNow = max(maxTillNow, curMax);
        return maxTillNow;
    }


1. (b) Kadane's Algo for calculating maxsum with indexes;


void maxSubArraySum(int a[], int size)
{
	int max_so_far = INT_MIN, max_ending_here = 0,
		start = 0, end = 0, s = 0;

	for (int i = 0; i < size; i++) {
		max_ending_here += a[i];

		if (max_so_far < max_ending_here) {
			max_so_far = max_ending_here;
			start = s;
			end = i;
		}
		if (max_ending_here < 0) {
			max_ending_here = 0;
			s = i + 1;
		}
	}
	cout << "Maximum contiguous sum is " << max_so_far
		<< endl;
	cout << "Starting index " << start << endl
		<< "Ending index " << end << endl;
}



2. Count time


auto start = high_resolution_clock::now();
    for (int i = 0; i < N; ++i)
        v1.push_back(i);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
 
    cout << "Method I took " << duration.count() << " microseconds\n"
    
    
3. Binary Search
    
    
    ll l = 1; ll r = max;
    while (r - l > 1)
    {
        ll mid = l + ((r - l) / 2);

        ll ans = 0;
       // calculate ans (may be in a loop)
       // t is the value being searched
        if (ans >= t)
        {
            r = mid;
        }
        else
        {
            l = mid;
        }
    }
    // Now l and r both can be answer, So check for both of them individually if they satisfy the condition given or not;
    //return l or r according to above line



4. prime numbers up to N (Sieve of eratosthenes)

	const int N = 0;
	vector<int> prime(N+5,1);
	vector<int>primes;
void sieve(){
   	prime[0] = prime[1] = 0;
	for (int i = 2; i * i <= N; i++) {
    		if (prime[i]) {
        for (int j = i * i; j <= N; j += i)
            prime[j] = 0;
   			      }
					}
	for(int i=2;i<=N;i++)
	{
   	      if(prime[i]){primes.push_back(i);}
	}
     }
     

5. Prime factors of many numbers optimally (using optimization in sieve)


	const int N = 0;
	vector<int> prime(N+5,1);	
void sieve() {
    prime[0] = prime[1] = 0;
    for (int i = 2; i * i <= N; i++) {
        if (prime[i] == 1) {
            for (int j = i * i; j <= N; j += i)
                prime[j] = i;
        }
    }
    for (int i = 2; i <= N; i++)
    {
        if (prime[i] == 1) {prime[i] = i;}
    }
}
void primefactors(ll number, vector<int>&v)
{
    while (number >= 2)
    {
        int val = prime[number];
        v.push_back(val);
        while (value % val == 0)
        {
            number = number / val;
        }
    }
}
	

6.  Intersection of two intervals both sides included

	Two intervals [l,r] & [left, right]
	if (left <= r && l <= right)
	 {
		l = max(left, l);
		r = min(right, r);
	}
	else
	{
		Null
	}
	
7.  Sqrt function takes way more time for a double or floating point than integer value.

8. Fenwick trees implementation

  struct FenwickTree {
  vector<ll> bit;  // binary indexed tree
  ll n;

  FenwickTree(ll n) {
    this->n = n;
    bit.assign(n, 0);
  }

  FenwickTree(vector<ll> const &a) : FenwickTree(a.size()) {
    for (size_t i = 0; i < a.size(); i++)
      add(i, a[i]);
  }

  ll sum(ll r) {
    ll ret = 0;
    for (; r >= 0; r = (r & (r + 1)) - 1)
      ret += bit[r];
    return ret;
  }

  ll sum(ll l, ll r) {
    if (l > r) return 0;
    return sum(r) - sum(l - 1);
  }

  void add(ll idx, ll delta) {
    for (; idx < n; idx = idx | (idx + 1))
      bit[idx] += delta;
  }
};

 // initialisation ->  FenwickTree F(n + 1);


9.  Disjoint set 


    class DisjointSet {
  vector<int>rank, parent, size;
public:
  DisjointSet(int n) {
    rank.resize(n + 1, 0);
    parent.resize(n + 1);
    size.resize(n + 1);
    for (int i = 0; i <= n; i++) {
      parent[i] = i;
      size[i] = 1;
    }
  }
  int findUPar(int node) {
    if (node == parent[node])
      return node;
    return parent[node] = findUPar(parent[node]);
  }

  void unionByRank(int u, int v) {
    int ulp_u = findUPar(u);
    int ulp_v = findUPar(v);
    if (ulp_u == ulp_v) return;
    if (rank[ulp_u] < rank[ulp_v]) {
      parent[ulp_u] = ulp_v;
    }
    else if (rank[ulp_v] < rank[ulp_u])
    {
      parent[ulp_v] = ulp_u;
    }
    else
    {
      parent[ulp_v] = ulp_u;
      rank[ulp_u] ++;
    }
  }
  void unionBySize(int u, int v) {
    int ulp_u = findUPar(u);
    int ulp_v = findUPar(v);
    if (ulp_u == ulp_v) return;
    if (size[ulp_u] < size[ulp_v]) {
      parent[ulp_u] = ulp_v;
      size[ulp_v] += size[ulp_u];
    }
    else
    {
      parent[ulp_v] = ulp_u;
      size[ulp_u] += size[ulp_v];
    }
  }
};

// DSU
// call make_set() inside main
 
vector<ll> parent, siz;
void make_set(ll n)
{
    ll i;
    siz.assign(n + 1, 1);
    parent.assign(n + 1, 0);
    for (i = 1; i <= n; i++)
    {
        parent[i] = i;
    }
}
 
ll find_set(ll u)
{
    if (parent[u] == u) {return u;}
    return parent[u] = find_set(parent[u]);
}
 
bool union_set(ll u, ll v)
{
    u = find_set(u);
    v = find_set(v);
    if (u == v) {return false;}
    parent[v] = u;
    siz[u] += siz[v];
    return true;
}

10. Bitwise Operations

bool powerOfTwo(ll x){ return x && !(x&(x-1)); }
bool chkset(ll x, ll k) { return x&(1<<k); }
void setbit(ll &x, ll k) { x = x|(1<<k); }
void unsetbit(ll &x, ll k) { x = x&~(1<<k); }
void togglebit(ll &x, ll k) { x = x^(1<<k); }
ll noOfSetBits(ll x) { return __builtin_popcountll(x); }


11. bitwsise xor

suppose: a^b^c^d^e^f^g =0
Observation: Choose any of the a,b,c,d,e,f,g => for example b,f,g left are (a,c,d,e) => then b^f^g = a^c^d^e.
----------------------------------------------------------------------------------------------------------------------
Numbers 0 to n in binary
0000
0001
0010
0011
0100
0101
0110
0111
1000
1001
1010
1011
1100
1101
1110
1111

Observation: consider the ith bit, the number of zeroes equals the number of ones in a prefix only when the length of the prefix is a multiple of 2^i.
Also they alternate between after 2^i numbers.


12. Count the number of nodes below a node in a tree(implemented by undirected graph in a vector<long long>adj[] structure)

ll dfs(ll ind, vector<ll>adj[], ll dist[], ll par)
{
	ll cnt = 0;
	for (auto it : adj[ind])
	{
		if (it != par)
		{
			cnt += dfs(it, adj, dist, ind);
		}
	}
	dist[ind] = cnt;
	return 1 + cnt;
}

13. For calculating something from l to r , if it is complex do it in this way (0 to r) - (0 to l)
    Ex problem : https://codeforces.com/contest/1891/problem/D

14. To handle overflows you can perform the following check to multiply two integers:
const ll INF = LLONG_MAX; // or 1e18 + 1e9, or anything else you like
ll a, b;
...
ll c = (a >= INF / b ? INF : a * b);
It is nice to encapsulate this into a function (if you want to use it more than once) alike

ll mult(ll a, ll b) { return (a >= INF / b ? INF : a * b); }


15.  Segment tree template   (implemented for calculating minimum)

struct node {
    ll min_val;
    node()
    {
        min_val = INT_MAX;
    }
};

node t[4 * 200200];
ll arr[200200];
node merge(node a, node b)
{
    node ans;
    ans.min_val = min(a.min_val, b.min_val);
    return ans;
}
void build(ll id, ll l, ll r)
{
    if (l == r)
    {
        t[id].min_val = arr[l];
        return;
    }
    ll mid = (l + r) / 2;
    build(2 * id, l, mid);
    build(2 * id + 1, mid + 1, r);
    t[id] = merge(t[2 * id], t[2 * id + 1]);
}
void update(ll id, ll l, ll r, ll pos, ll val)
{
    if (pos < l || pos > r)
    {
        return;
    }
    if (l == r)
    {
        t[id].min_val = val;
        return;
    }
    ll mid = (l + r) / 2;
    update(2 * id, l, mid, pos, val);
    update(2 * id + 1, mid + 1, r, pos, val);
    t[id] = merge(t[2 * id], t[2 * id + 1]);
}
node query(ll id, ll l, ll r, ll lq, ll rq)
{
    if (lq > r || l > rq)
    {
        return node();
    }
    if (l >= lq && r <= rq)
    {
        return t[id];
    }
    ll mid = (l + r) / 2;
    node ans = merge(query(2 * id, l, mid, lq, rq), query(2 * id + 1, mid + 1, r, lq, rq));
    return ans;
}


16. seg tree with lazy propagation

#include<bits/stdc++.h>
using namespace std;
#define ll long long
struct node {
    ll sum;
    ll lazy;
    node()
    {
        sum = 0;
        lazy = 0;
    }
};
node t[4 * 200200];
ll arr[200200];
node merge(node a, node b)
{
    node ans;
    ans.sum = a.sum + b.sum;
    return ans;
}
void build(ll id, ll l, ll r)
{
    if (l == r)
    {
        t[id].sum = arr[l];
        t[id].lazy = 0;
        return;
    }
    ll mid = (l + r) / 2;
    build(2 * id, l, mid);
    build(2 * id + 1, mid + 1, r);
    t[id] = merge(t[2 * id], t[2 * id + 1]);
}

void apply(ll id, ll l, ll r)
{
    t[id].sum += (r - l + 1) * t[id].lazy;
}
void push_down(ll cur, ll child, ll l, ll r)
{
    t[child].lazy += t[cur].lazy;
}
void push(ll id, ll l, ll r)
{
    if (t[id].lazy != 0)
    {
        // if there is lazy apply & push down
        // apply logic

        apply(id, l, r);

        // push down logic
        // if not leaf

        if (l != r)
        {
            ll mid = (l + r) / 2;
            push_down(id, 2 * id, l, mid);
            push_down(id, 2 * id + 1, mid + 1, r);
        }
        t[id].lazy = 0;

    }
}

node query(ll id, ll l, ll r, ll lq, ll rq)
{
    push(id, l, r);
    if (lq > r || l > rq)
    {
        return node();
    }
    if (l >= lq && r <= rq)
    {
        return t[id];
    }
    ll mid = (l + r) / 2;
    return merge(query(id << 1, l, mid, lq, rq), query(id << 1 | 1, mid + 1, r, lq, rq));
}
void update(ll id, ll l, ll r, ll lq, ll rq, ll val)
{
    push(id, l, r);
    if (lq > r || l > rq) {return;}
    if (l >= lq && r <= rq)
    {
        t[id].lazy += val;
        push(id, l, r);
        return;
    }
    ll mid = (l + r) / 2;
    update(2 * id, l, mid, lq, rq, val);
    update(2 * id + 1, mid + 1, r, lq, rq, val);
    merge(t[2 * id], t[2 * id + 1]);

}

int main()
{
    ll n;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    build(1, 0, n - 1);
    update(1, 0, n - 1, 0, 4, 2);
    update(1, 0, n - 1, 3, 4, 3);
    node ans;
    ans = query(1, 0, n - 1, 2, 4);
    cout << ans.sum << "\n";

    return 0;
}


17.   If you want to calculate values of keys from lo to hi, instead of searching for each key which gives time complexity O((hi-lo)*log(n)) 
      We can do the following which have time complexity O(log(n) + (hi-lo))

	ll calc(ll lo, ll hi, map<ll, ll>& sal2freq)
	{
	    ll res = 0;
	    auto it = sal2freq.lower_bound(lo);
	    while (it != sal2freq.end() && it->first <= hi) {
	        res += it->second;
	        it++;
	    }
	    return res;
	}

18.   sqrt decomposition 
       // Blocking
	#include <bits/stdc++.h>
	using namespace std;
	
	struct Sqrt {
		int block_size;
		vector<int> nums;
		vector<long long> blocks;
		Sqrt(int sqrtn, vector<int> &arr) : block_size(sqrtn), blocks(sqrtn, 0) {
			nums = arr;
			for (int i = 0; i < nums.size(); i++) {
				blocks[i / block_size] += nums[i];
			}
		}
	
		/** O(1) update to set nums[x] to v */
		void update(int x, int v) {
			blocks[x / block_size] -= nums[x];
			nums[x] = v;
			blocks[x / block_size] += nums[x];
		}
	
		/** O(sqrt(n)) query for sum of [0, r) */
		long long query(int r) {
			long long res = 0;
			for (int i = 0; i < r / block_size; i++) { res += blocks[i]; }
			for (int i = (r / block_size) * block_size; i < r; i++) {
				res += nums[i];
			}
			return res;
		}
	
		/** O(sqrt(n)) query for sum of [l, r) */
		long long query(int l, int r) { return query(r) - query(l - 1); }
	};
	
	int main() {
		int n, q;
		cin >> n >> q;
	
		vector<int> arr(n);
		for (int i = 0; i < n; i++) { cin >> arr[i]; }
		Sqrt sq((int)ceil(sqrt(n)), arr);
	
		for (int i = 0; i < q; i++) {
			int t, l, r;
			cin >> t >> l >> r;
			if (t == 1) {
				sq.update(l - 1, r);
			} else {
				cout << sq.query(l, r) << "\n";
			}
		}
	}

// Mo's Algorithm // Cses - distinct values queries

#include<bits/stdc++.h>
using namespace std;
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
struct query {
    int l;
    int r;
    int idx;
};
int v[200200];
int block_size;;
bool cmp(query a, query b)
{
    if (a.l / block_size == b.l / block_size)
    {
        return a.r < b.r;
    }
    else
    {
        return a.l < b.l;
    }
}
int distinct_values = 0;
int mp[200100];
void add(int idx)
{
    mp[v[idx]]++;
    if (mp[v[idx]] == 1)
    {
        distinct_values++;
    }
}
void remove(int idx)
{
    mp[v[idx]]--;
    if (mp[v[idx]] == 0)
    {
        distinct_values--;
    }
}
int main()
{
    fast_cin();
    int n, q;
    cin >> n >> q;
    unordered_map<int, int>m;
    block_size = (int)(sqrt(n));
    for (int i = 0; i < n; i++)
    {
        cin >> v[i];
    }
    int cnt = 1;
    for (int i = 0; i < n; i++)
    {
        if (m.find(v[i]) == m.end())
        {
            m[v[i]] = cnt;
            v[i] = cnt;
            cnt++;
        }
        else
        {
            v[i] = m[v[i]];
        }
    }
    vector<query>queries;
    for (int i = 0; i < q; i++)
    {
        int l, r;
        cin >> l >> r;
        l--; r--;
        queries.push_back({l, r, i});
    }
    sort(queries.begin(), queries.end(), cmp);
    int mo_l = 0;
    int mo_r = -1;
    vector<int>ans(q);
    for (int i = 0; i < q; i++)
    {
        int left = queries[i].l;
        int right = queries[i].r;
        while (mo_r < right)
        {
            add(++mo_r);
        }
        while (mo_r > right)
        {
            remove(mo_r--);
        }
        while (mo_l < left)
        {
            remove(mo_l++);
        }
        while (mo_l > left)
        {
            add(--mo_l);
        }
        ans[queries[i].idx] = distinct_values;

    }
    for (int i = 0; i < q; i++)
    {
        cout << ans[i] << "\n";
    }

    return 0;
}

19.  Ordered Set

	#include <bits/stdc++.h>
	 
	using namespace std;
	 
	#include <ext/pb_ds/assoc_container.hpp>
	#include <ext/pb_ds/tree_policy.hpp>
	 
	typedef __gnu_pbds::tree<int, __gnu_pbds::null_type, less<int>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update> ordered_set;
	 
	int t, n;
	 
	vector<pair<int, int>> arr;
	 
	long long ans;
	 
	ordered_set st;

20.  upper bound for number of divisors of some natural number n   is assumed to be O(n^(1/3)).
     link for more - https://codeforces.com/blog/entry/14463

21. Sieve   --- mind[i] gives minimum prime divisor -- maxind[i] gives maximum prime divisor

     	vector<int> mind(N, -1) , maxind;

	  for (int i = 2; i < N; ++i) if (mind[i] == -1)
	    for (int j = i; j < N; j += i) if (mind[j] == -1)
	      mind[j] = i;

	for (int i = 2; i < N; ++i) if (maxind[i] == -1)
	    for (int j = i; j < N; j += i)
	      maxind[j] = i;

22. Observation (consecutive numbers) 
	....+n-2 + n-1 + n + n+1 + n+2+....(n numbers where n is odd) = n^2

23. Chicken McNugget Theorem
The Chicken McNugget Theorem (or Postage Stamp Problem or Frobenius Coin Problem) states that for any two relatively prime positive integers m,n, 
the greatest integer that cannot be written in the form am + bn for nonnegative integers a, b is mn-m-n
A consequence of the theorem is that there are exactly ((m - 1)(n - 1))/2 positive integers which cannot be expressed in the form am + bn. 
The proof is based on the fact that in each pair of the form (k, mn-m-n-k), exactly one element is expressible.
